# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type File {
    encoding: String!
    filename: String!
    mimetype: String!
    url: String
}

type Lead {
    _id: ID!
    city: String
    email: String
    firstName: String
    lastName: String
    phone: String
    state: String
    user: User
}

type Leads {
    docs: [Lead]
    hasNextPage: Boolean!
    hasPrevPage: Boolean!
    nextPage: Int
    page: Int
    prevPage: Int
    totalDocs: Int
    totalPages: Int
}

type Meeting {
    _id: ID!
    createdAt: String
    description: String
    link: String
    platform: String
    scheduledTime: String
    title: String
    updatedAt: String
}

type Meetings {
    docs: [Meeting]
    hasNextPage: Boolean!
    hasPrevPage: Boolean!
    nextPage: Int
    page: Int
    prevPage: Int
    totalDocs: Int
    totalPages: Int
}

type Mutation {
    createMeeting(input: MeetingInput): Meeting
    deleteMeeting(id: String): Meeting
    editUser(firstName: String!, lastName: String, profilePic: String): User
    login(email: String!, password: String!): User
    logout: Boolean
    registerKid(input: UserInput!): User
    registerUser(input: UserInput!): User
    resetPass(email: String, otp: Int!, password: String!): Boolean
    sendOTPResetPass(email: String!): Boolean
    submitLead(input: LeadInput): Lead
    submitQuery(input: SubmitQuery): Boolean
    updateMeeting(id: String, input: MeetingInput): Meeting
    updateProfilePic(url: String!): User
    uploadFile(file: Upload!): File
    user: User
}

type PageInfo {
    cursor: String!
    endCursor: String
    hasNextPage: Boolean!
    nextCursor: String
    prevCursor: String
    startCursor: String
}

type Query {
    currentUser: User
    leads(limit: Int, orderBy: String, page: Int): Leads
    meeting(id: String): Meeting
    meetings(limit: Int, orderBy: String, page: Int): Meetings
    searchUser(limit: Int, name: String, page: Int, role: String): Users
    user(userId: ID!): User
    users(limit: Int, orderBy: String, page: Int, role: String): Users
}

type User {
    _id: ID!
    active: Boolean
    createdAt: String
    email: String
    enabled: Boolean
    firstName: String
    lastLoginAt: String
    lastName: String
    manager: User
    mobile: String
    profilePic: String
    role: String
    updatedAt: String
    username: String
}

type Users {
    docs: [User]
    hasNextPage: Boolean!
    hasPrevPage: Boolean!
    nextPage: Int
    page: Int
    prevPage: Int
    totalDocs: Int
    totalPages: Int
}

input ContactQueryInput {
    email: String
    fName: String
    lName: String
    message: String
    mobile: Int
    org: String
}

input LeadInput {
    city: String
    email: String
    firstName: String
    lastName: String
    phone: String
    state: String
    userId: String
}

input MeetingInput {
    description: String
    link: String
    platform: String
    scheduledTime: String
    title: String
}

input ProfileInput {
    _id: ID
    city: String
    dob: String
    email: String
    fb: String
    gender: String
    insta: String
    linkedIn: String
    name: String
    phone: String
    pincode: String
    profilePic: String
    twitter: String
}

input SubmitQuery {
    email: String
    message: String
    name: String
    phone: String
}

input UserInput {
    city: String
    dob: String
    email: String!
    empId: String
    gender: String
    manager: String
    name: String!
    password: String!
    phone: String
    profilePic: String
    role: String
}

input resetPasswordInput {
    password: String!
    resetToken: String!
}


scalar Upload
